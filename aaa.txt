diff --git a/var/www/html/YoupiBanane/directory/Yeah/not_happy.bad_extension b/aaa
similarity index 100%
rename from var/www/html/YoupiBanane/directory/Yeah/not_happy.bad_extension
rename to aaa
diff --git a/config/config_tester.conf b/config/config_tester.conf
index 9a7ecbd..6e2dadf 100644
--- a/config/config_tester.conf
+++ b/config/config_tester.conf
@@ -4,7 +4,7 @@
 # - /put_test/* must answer to PUT request and save files to a directory of your choice
 # - any file with .bla as extension must answer to POST request by calling the cgi_test executable
 # - /post_body must answer anything to POST request with a maxBody of 100
-# - /directory/ must answer to GET request and the root of it would be the repository YoupiBanane
+# - /directory/ must answer to GET request and the root of it would be the repository YoupiBanane
 #    and if no file are requested, it should search for youpi.bad_extension files
 http {
     server {
@@ -19,6 +19,7 @@ http {

 		location /put_test/ {
 			limit_except PUT;
+			root var/www/html/put_here;
 		}

 		location /post_body {
@@ -28,7 +29,7 @@ http {
             cgi_path ./tester/cgi_tester;
 		}

-		location /directory/ {
+		location /directory {
 			limit_except GET POST;
 			root var/www/html/YoupiBanane;
 			index youpi.bad_extension;
diff --git a/src/webserv/cgi_practice/cgi_practice b/src/webserv/cgi_practice/cgi_practice
index 7b09b72..89f89f7 100755
Binary files a/src/webserv/cgi_practice/cgi_practice and b/src/webserv/cgi_practice/cgi_practice differ
diff --git a/src/webserv/cgi_practice/cgi_practice.cpp b/src/webserv/cgi_practice/cgi_practice.cpp
index 23f4b8e..16ba7a1 100644
--- a/src/webserv/cgi_practice/cgi_practice.cpp
+++ b/src/webserv/cgi_practice/cgi_practice.cpp
@@ -6,7 +6,7 @@
 /*   By: sucho <sucho@student.42seoul.kr>           +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2021/06/25 19:26:26 by sucho             #+#    #+#             */
-/*   Updated: 2021/07/25 22:31:02 by sucho            ###   ########.fr       */
+/*   Updated: 2021/08/08 16:23:09 by sucho            ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */

@@ -122,11 +122,11 @@ int main(int argc, char *argv[]) {
       env_set.insert(env_temp);
     }
     {
-      if (std::string(argv[4]).size() > 0)
-      {
+      if (std::string(argv[4]).size() > 0) {
         env_set["CONTENT_LENGTH"] = std::to_string(std::string(argv[4]).size());
         env_set["QUERY_STRING"] = std::string(argv[4]);
-      }
+      } else
+        env_set["QUERY_STRING"] = std::to_string(10);
       env_set["REQUEST_METHOD"] = std::string(argv[2]);
       env_set["REDIRECT_STATUS"] = "CGI";
       env_set["SCRIPT_FILENAME"] = std::string(argv[3]);
@@ -171,16 +171,27 @@ int main(int argc, char *argv[]) {
       //              -> 2) /Users/$(USER)/.brew/bin/php-cgi
       else if (!strcmp(command[0], "cgi_tester"))
         execve("./cgi_tester", command, environ);
-      exit(1);
+      // exit(1);
     } else {
-      close(pipe_fd[1]);
+      // close(pipe_fd[1]);
       int nbytes;
       int i = 0;
-      while ((nbytes = read(pipe_fd[0], foo, 512))) {
+      // while ((nbytes = read(pipe_fd[0], foo, sizeof(foo)))) {
+      //   write(STDOUT_FILENO, foo, strlen(foo));
+      //   i++;
+      //   memset(foo, 0, 4096);
+      // }
+      write(pipe_fd[0], &"abcdehelloworld", 10);
+      write(pipe_fd[0], &"\0", 1);
+      close(pipe_fd[1]);
+
+      while ((nbytes = read(pipe_fd[0], foo, sizeof(foo)))) {
         write(STDOUT_FILENO, foo, strlen(foo));
         i++;
         memset(foo, 0, 4096);
       }
+      close(pipe_fd[1]);
+      close(pipe_fd[0]);
       wait(NULL);
     }
   } else
diff --git a/src/webserv/config/LocationConfig.cpp b/src/webserv/config/LocationConfig.cpp
index 76895be..50892eb 100644
--- a/src/webserv/config/LocationConfig.cpp
+++ b/src/webserv/config/LocationConfig.cpp
@@ -260,19 +260,12 @@ LocationConfig::~LocationConfig(void) {
 }

 bool LocationConfig::checkPrefixMatchUri(std::string request_uri) {
-  if (this->uri.length() <= request_uri.length() + 1) {
-    size_t compare_length = request_uri.length() > this->uri.length() ? this->uri.length() : request_uri.length();
-    if (request_uri.compare(0, compare_length, this->uri, 0, compare_length) == 0) {
+  if (this->uri.length() <= request_uri.length()) {
+    if (request_uri.compare(0, this->uri.length(), this->uri) == 0) {
       return true;
     }
   }
   return false;
-  // if (this->uri.length() <= request_uri.length()) {
-  //   if (request_uri.compare(0, this->uri.length(), this->uri) == 0) {
-  //     return true;
-  //   }
-  // }
-  // return false;
 }

 const std::string &LocationConfig::getUri(void) const {
diff --git a/src/webserv/message/Request.cpp b/src/webserv/message/Request.cpp
index 6c0a872..b828167 100644
--- a/src/webserv/message/Request.cpp
+++ b/src/webserv/message/Request.cpp
@@ -21,6 +21,7 @@ void Request::clear() {
   uri_struct_.host_.clear();
   uri_struct_.port_.clear();
   uri_struct_.path_.clear();
+  uri_struct_.filepath_.clear();
   uri_struct_.query_string_.clear();
   msg_.clear();
 }
@@ -32,6 +33,7 @@ const std::string &Request::getUri() { return uri_; } // 원본
 const std::string &Request::getHost() const { return uri_struct_.host_; }
 const std::string &Request::getPort() const { return uri_struct_.port_; }
 const std::string &Request::getPath() const { return uri_struct_.path_; }
+const std::string &Request::getFilePath() const { return uri_struct_.filepath_; }
 const std::string &Request::getQueryString() const { return uri_struct_.query_string_; }
 const std::string &Request::getHttpVersion() const { return http_version_; }
 const std::map<std::string, std::string> &Request::getHeaders() const { return headers_; }
@@ -42,6 +44,7 @@ void Request::setSchema(std::string schema) { uri_struct_.schema_ = schema; }
 void Request::setHost(std::string host) { uri_struct_.host_ = host; }
 void Request::setPort(std::string port) { uri_struct_.port_ = port; }
 void Request::setPath(std::string path) { uri_struct_.path_ = path; }
+void Request::setFilePath(std::string filepath) { uri_struct_.filepath_ = filepath; }
 void Request::setQueryString(std::string query_string) { uri_struct_.query_string_ = query_string; }
 void Request::setUri(std::string uri) { uri_ = uri; }
 void Request::setHttpVersion(std::string http_version) { http_version_ = http_version; }
diff --git a/src/webserv/message/Request.hpp b/src/webserv/message/Request.hpp
index c231e20..3660a72 100644
--- a/src/webserv/message/Request.hpp
+++ b/src/webserv/message/Request.hpp
@@ -14,6 +14,7 @@ typedef struct s_uri {
   std::string host_;
   std::string port_;
   std::string path_;
+  std::string filepath_;
   std::string query_string_;
 } t_uri;

@@ -52,6 +53,7 @@ struct Request {
   const std::string &getHost() const;
   const std::string &getPort() const;
   const std::string &getPath() const;
+  const std::string &getFilePath() const;
   const std::string &getQueryString() const;
   const std::string &getUri();
   const std::string &getHttpVersion() const;
@@ -64,6 +66,7 @@ struct Request {
   void setHost(std::string host);
   void setPort(std::string port);
   void setPath(std::string path);
+  void setFilePath(std::string path);
   void setQueryString(std::string query_string);
   void setUri(std::string uri);
   void setHttpVersion(std::string http_version);
diff --git a/src/webserv/message/handler/CgiHandler.cpp b/src/webserv/message/handler/CgiHandler.cpp
index e1653ce..c6652a5 100644
--- a/src/webserv/message/handler/CgiHandler.cpp
+++ b/src/webserv/message/handler/CgiHandler.cpp
@@ -4,7 +4,7 @@ namespace ft {

 void CgiHandler::init_cgi_child(Connection *c) {
   ServerConfig *server_config = c->getHttpConfig()->getServerConfig(c->getSockaddrToConnect().sin_port, c->getSockaddrToConnect().sin_addr.s_addr, c->getRequest().getHeaderValue("Host"));
-  LocationConfig *location = server_config->getLocationConfig(c->getRequest().getPath());
+  LocationConfig *location = server_config->getLocationConfig(c->getRequest().getUri());
   // char **environ;
   // char **command;
   // environ = setEnviron(c);
@@ -32,7 +32,7 @@ void CgiHandler::init_cgi_child(Connection *c) {

     // execve(location->getCgiPath().c_str(), command, environ);
     execve(location->getCgiPath().c_str(),
-           setCommand(location->getCgiPath(), location->getRoot() + c->getRequest().getPath()),
+           setCommand(location->getCgiPath(), c->getRequest().getFilePath()),
            setEnviron(c));
   }
   // TODO: 실패 예외처리
@@ -40,6 +40,9 @@ void CgiHandler::init_cgi_child(Connection *c) {
   // TODO: 실패 예외처리
   close(c->readpipe[1]);

+  std::cout << "check body buf" << std::endl;
+  std::cout << c->getBodyBuf() << std::endl;
+  std::cout << "check body buf" << std::endl;
   // if (!c->getBodyBuf().empty()) {
   write(c->writepipe[1], c->getBodyBuf().c_str(), (size_t)c->getBodyBuf().size());
   //숫자 확인
@@ -90,7 +93,7 @@ void CgiHandler::handle_cgi_header(Connection *c) {

 char **CgiHandler::setEnviron(Connection *c) {
   ServerConfig *server_config = c->getHttpConfig()->getServerConfig(c->getSockaddrToConnect().sin_port, c->getSockaddrToConnect().sin_addr.s_addr, c->getRequest().getHeaderValue("Host"));
-  LocationConfig *location = server_config->getLocationConfig(c->getRequest().getPath());
+  LocationConfig *location = server_config->getLocationConfig(c->getRequest().getUri());
   std::map<std::string, std::string> env_set;
   {
     if (!c->getRequest().getHeaderValue("Content-Length").empty()) {
@@ -102,12 +105,12 @@ char **CgiHandler::setEnviron(Connection *c) {
     }
     env_set["REQUEST_METHOD"] = c->getRequest().getMethod();
     env_set["REDIRECT_STATUS"] = "CGI";
-    env_set["SCRIPT_FILENAME"] = location->getRoot() + c->getRequest().getPath();
+    env_set["SCRIPT_FILENAME"] = c->getRequest().getFilePath();
     env_set["SERVER_PROTOCOL"] = "HTTP/1.1";
     env_set["PATH_INFO"] = c->getRequest().getPath();
     env_set["CONTENT_TYPE"] = c->getRequest().getHeaderValue("Content-Type");
     env_set["GATEWAY_INTERFACE"] = "CGI/1.1";
-    env_set["PATH_TRANSLATED"] = location->getRoot() + c->getRequest().getPath();
+    env_set["PATH_TRANSLATED"] = c->getRequest().getFilePath();
     env_set["REMOTE_ADDR"] = "127.0.0.1";  // TODO: ip주소 받아오는 부분 찾기
     env_set["REQUEST_URI"] = c->getRequest().getUri();
     env_set["HTTP_HOST"] = c->getRequest().getHeaderValue("Host");
diff --git a/src/webserv/message/handler/MessageHandler.cpp b/src/webserv/message/handler/MessageHandler.cpp
index 3ab5233..019fc8b 100644
--- a/src/webserv/message/handler/MessageHandler.cpp
+++ b/src/webserv/message/handler/MessageHandler.cpp
@@ -28,6 +28,9 @@ void MessageHandler::check_request_header(Connection *c) {
   // 있어야되는지??
   request_handler_.setRequest(&c->getRequest());

+  //t_uri uri_struct 전체 셋업하는 부분으로...
+  request_handler_.setupUriStruct(serverconfig_test, locationconfig_test);
+
   if (request_handler_.isHostHeaderExist() == false) {
     c->status_code_ = 400;
     c->setRecvPhase(MESSAGE_BODY_COMPLETE);
@@ -39,10 +42,9 @@ void MessageHandler::check_request_header(Connection *c) {
     c->setRecvPhase(MESSAGE_BODY_COMPLETE);
     return;
   }
-
-  // 문제가 되는 부분
+
   if (request_handler_.isUriFileExist(locationconfig_test) == false &&
-      c->getRequest().getMethod() != "PUT" && c->getRequest().getMethod() != "POST") {
+      c->getRequest().getMethod() != "PUT") {
     c->status_code_ = 404;
     c->setRecvPhase(MESSAGE_BODY_COMPLETE);
     return;
@@ -56,8 +58,6 @@ void MessageHandler::check_request_header(Connection *c) {

   if (!c->getRequest().getHeaderValue("Content-Length").empty())
     c->setStringBufferContentLength(stoi(c->getRequest().getHeaderValue("Content-Length")));
-  else
-    c->chunked_message = true;

   if (c->interrupted == true) {
     c->setRecvPhase(MESSAGE_INTERRUPTED);
@@ -69,7 +69,8 @@ void MessageHandler::check_request_header(Connection *c) {
     c->getBodyBuf().clear();
     c->setStringBufferContentLength(-1);
     c->setRecvPhase(MESSAGE_BODY_COMPLETE);
-  } else if ((c->getStringBufferContentLength() <= (int)c->getBodyBuf().size()))
+  } else if (0 <= c->getStringBufferContentLength() &&
+             (c->getStringBufferContentLength() <= (int)c->getBodyBuf().size()))
     c->setRecvPhase(MESSAGE_BODY_COMPLETE);
   else
     c->setRecvPhase(MESSAGE_BODY_INCOMING);
@@ -83,7 +84,6 @@ void MessageHandler::checkCgiProcess(Connection *c) {
       locationconfig_test->checkCgiExtension(c->getRequest().getPath())) {
     CgiHandler::init_cgi_child(c);
   }
-  std::cout << "cgi??" << std::endl;
 }

 void MessageHandler::handle_request_body(Connection *c) {
@@ -91,7 +91,7 @@ void MessageHandler::handle_request_body(Connection *c) {

   // TODO: 조건문 수정 CHUNKED_CHUNKED
   // Transfer-Encoding : chunked 아닐 때
-  if (c->chunked_message == false) {
+  if (!c->getRequest().getHeaderValue("Content-Length").empty()) {
     if ((size_t)c->getStringBufferContentLength() <= strlen(c->buffer_)) {
       c->appendBodyBuf(c->buffer_, c->getStringBufferContentLength());
       c->setStringBufferContentLength(-1);
@@ -100,12 +100,6 @@ void MessageHandler::handle_request_body(Connection *c) {
       c->setStringBufferContentLength(c->getStringBufferContentLength() - strlen(c->buffer_));
       c->setBodyBuf(c->buffer_);
     }
-  } else {
-    ////// 여기
-    std::cout << "====chunked_body_place==========" << std::endl;
-    std::cout << c->buffer_ << std::endl;
-    std::cout << "====chunked_body_place==========" << std::endl;
-    ////// 여기
   }
 }

@@ -124,7 +118,7 @@ void MessageHandler::execute_server_side(Connection *c) {
   if (c->getRequest().getMethod() == "PUT" &&
       (c->getResponse().getStatusCode() == 201 || (c->getResponse().getStatusCode() == 204))) {
     // create response body
-    executePutMethod(response_handler_.getAccessPath(c->getRequest().getPath()), c->getBodyBuf());
+    executePutMethod(c->getRequest().getFilePath(), c->getBodyBuf());

     //TODO: remove;
     c->getBodyBuf().clear();
diff --git a/src/webserv/message/handler/RequestHandler.cpp b/src/webserv/message/handler/RequestHandler.cpp
index 2d2b8d5..94fa1f6 100644
--- a/src/webserv/message/handler/RequestHandler.cpp
+++ b/src/webserv/message/handler/RequestHandler.cpp
@@ -17,7 +17,7 @@ void RequestHandler::processByRecvPhase(Connection *c) {
   if (c->getRecvPhase() == MESSAGE_START_LINE_INCOMPLETE)
     checkMsgForStartLine(c);
   if (c->getRecvPhase() == MESSAGE_START_LINE_COMPLETE)
-    parseStartLine(c);
+    parseStartLine(c);
   if (c->getRecvPhase() == MESSAGE_HEADER_INCOMPLETE)
     checkMsgForHeader(c);
   if (c->getRecvPhase() == MESSAGE_HEADER_COMPLETE)
@@ -134,10 +134,6 @@ int RequestHandler::parseUri(std::string uri_str) {
         break;
       case port:
         if ((pos = uri_str.find_first_of("/? ")) != std::string::npos) {
-          for (size_t i = 1; i < pos; ++i) {
-            if (!isdigit(uri_str[i]))
-              return (PARSE_INVALID_URI);
-          }
           if (pos != 1)
             request_->setPort(uri_str.substr(1, pos - 1));
           uri_str.erase(0, pos);
@@ -222,7 +218,7 @@ void RequestHandler::parseHeaderLines(Connection *c) {
     header_lines.erase(0, pos + 2);
   }

-  if (request_->getMethod().compare("GET") && request_->getMethod().compare("HEAD") &&
+  if (request_->getMethod().compare("GET") && request_->getMethod().compare("HEAD") &&
       request_->getHeaderValue("Content-Length").empty() && !request_->getHeaderValue("Transfer-Encoding").compare("chunked"))
     c->setRecvPhase(MESSAGE_CHUNKED);
 }
@@ -294,36 +290,14 @@ bool RequestHandler::isHostHeaderExist() {
   return (false);
 }

-#include <dirent.h>
 bool RequestHandler::isUriFileExist(LocationConfig *location) {
-  DIR *dir_ptr;
+  (void)location;
   struct stat stat_buffer_;
-  std::string filepath = location->getRoot() + request_->getPath();

-  if (request_->getMethod() != "GET" && request_->getMethod() != "HEAD") {
-    if (stat(filepath.c_str(), &stat_buffer_) < 0)
-      return false;
-    else
-      return true;
-  }
-
-  if ((dir_ptr = opendir(filepath.c_str()))) {  // directory
-    if (*filepath.rbegin() != '/') {
-      request_->setPath(request_->getPath() + "/");
-      filepath += "/";
-    }
-    if (location->getIndex().empty())
-      return false;
-    filepath += location->getIndex()[0];
+  if (stat(request_->getFilePath().c_str(), &stat_buffer_) < 0) {
+    return (false);
   }
-  if (stat(filepath.c_str(), &stat_buffer_) < 0) {
-    size_t pos = request_->getPath().find(".");
-    std::string path = request_->getPath();
-    if (location->getUri().compare(path.substr(0, path.find_last_of("/") + 1)) || location->getIndex().empty() || pos == std::string::npos)
-      return false;
-    request_->setPath(location->getUri() + location->getIndex()[0]);
-  }
-  return true;
+  return (true);
 }

 bool RequestHandler::isAllowedMethod(LocationConfig *location) {
@@ -351,7 +325,6 @@ void RequestHandler::applyReturnDirectiveStatusCode(Connection *c, LocationConfi
 }

 void RequestHandler::handleChunked(Connection *c) {
-  std::cout << c->getRequest().getMethod() << " handle chunked" << std::endl;
   size_t pos;

   if (c->chunked_checker_ == STR_SIZE) {
@@ -365,27 +338,72 @@ void RequestHandler::handleChunked(Connection *c) {
     }
   }
   if (c->chunked_checker_ == STR) {
-    if (request_->getMsg().size() >= (c->chunked_str_size_ + 2) && !request_->getMsg().substr(c->chunked_str_size_, 2).compare("\r\n")){
-      c->appendBodyBuf((char *) request_->getMsg().c_str(), c->chunked_str_size_);
-      request_->getMsg().erase(0, c->chunked_str_size_ + 2);
-      c->chunked_checker_ = STR_SIZE;
-    }
-    if (request_->getMsg().size() >= c->chunked_str_size_ + 4) {
-      c->getBodyBuf().clear();
-      c->status_code_ = 400;
-      c->setRecvPhase(MESSAGE_BODY_COMPLETE);
-      return ;
+    if (request_->getMsg().size() >= c->chunked_str_size_ + 2) {
+      if (!request_->getMsg().substr(c->chunked_str_size_, c->chunked_str_size_ + 2).compare("\r\n")) {
+        c->appendBodyBuf((char *)request_->getMsg().c_str(), c->chunked_str_size_);
+        request_->getMsg().erase(0, c->chunked_str_size_ + 2);
+        c->chunked_checker_ = STR_SIZE;
+      }
+      if ((pos = request_->getMsg().substr(c->chunked_str_size_, c->chunked_str_size_ + 2).find("\r\n")) == std::string::npos) {
+        c->getBodyBuf().clear();
+        c->status_code_ = 400;
+        c->setRecvPhase(MESSAGE_BODY_COMPLETE);
+        return;
+      } else if (request_->getMsg().size() >= c->chunked_str_size_ + 4) {
+        c->getBodyBuf().clear();
+        c->status_code_ = 400;
+        c->setRecvPhase(MESSAGE_BODY_COMPLETE);
+        return;
+      }
     }
   }
   if (c->chunked_checker_ == END) {
     if ((pos = request_->getMsg().find("\r\n")) == 0) {
-      std::cout << "end" << std::endl;
       request_->getMsg().clear();
       c->setRecvPhase(MESSAGE_BODY_COMPLETE);
-    }
-    else if (pos != std::string::npos)
-      request_->getMsg().erase(0, pos + 2);
+    } else if (pos != std::string::npos)
+      request_->getMsg().clear();
+  }
+}
+
+void RequestHandler::setupUriStruct(ServerConfig *server, LocationConfig *location) {
+  std::string filepath;
+  std::cout << "request_uri: [" << request_->getUri() << "]" << std::endl;
+  std::cout << "location_uri: [" << location->getUri() << "]" << std::endl;
+  std::cout << "location_root: [" << location->getRoot() << "]" << std::endl;
+
+  filepath = location->getRoot();
+  if (location->getRoot() != server->getRoot()) {
+    if (!request_->getPath().substr(location->getUri().length()).empty()) {
+      if (*(location->getUri().rbegin()) == '/')
+        filepath.append(request_->getPath().substr(location->getUri().length() - 1));
+      else
+        filepath.append(request_->getPath().substr(location->getUri().length()));
+    } else
+      filepath.append("/");
+  } else {
+      filepath.append(request_->getPath());
   }
+  // struct stat stat_buffer_;
+
+  // std::vector<std::string>::const_iterator it_index;
+  // std::string temp;
+  // for (it_index = location->getIndex().begin(); it_index != location->getIndex().end(); it_index++) {
+  //   temp = request_->getFilePath() + *it_index;
+  //   std::cout << "temp: [" << temp << "]" << std::endl;
+  //   if (stat(temp.c_str(), &stat_buffer_) < 0) {
+  //     std::cout << "yo" << std::endl;
+
+  //     while (1) {
+  //       ;
+  //     }
+  //     break;
+  //   }
+  //   temp.clear();
+  // }
+
+  request_->setFilePath(filepath);
+  std::cout << "filepath: [" << request_->getFilePath() << "]" << std::endl;
 }

 }  // namespace ft
diff --git a/src/webserv/message/handler/RequestHandler.hpp b/src/webserv/message/handler/RequestHandler.hpp
index 55f71bb..804b667 100644
--- a/src/webserv/message/handler/RequestHandler.hpp
+++ b/src/webserv/message/handler/RequestHandler.hpp
@@ -39,6 +39,7 @@ class RequestHandler {
   void processByRecvPhase(Connection *c);
   static std::vector<std::string> splitByDelimiter(std::string const &str, char delimiter);

+  void setupUriStruct(ServerConfig *server, LocationConfig *location);
   bool isHostHeaderExist();
   bool isUriFileExist(LocationConfig *location);
   bool isAllowedMethod(LocationConfig *location);
diff --git a/src/webserv/message/handler/ResponseHandler.cpp b/src/webserv/message/handler/ResponseHandler.cpp
index 1db23f1..ab8bd22 100644
--- a/src/webserv/message/handler/ResponseHandler.cpp
+++ b/src/webserv/message/handler/ResponseHandler.cpp
@@ -2,9 +2,13 @@

 namespace ft {

-ResponseHandler::ResponseHandler() {}
+ResponseHandler::ResponseHandler() {
+  memset(&this->stat_buffer_, 0, sizeof(this->stat_buffer_));
+}

-ResponseHandler::~ResponseHandler() {}
+ResponseHandler::~ResponseHandler() {
+  memset(&this->stat_buffer_, 0, sizeof(this->stat_buffer_));
+}

 void ResponseHandler::setResponse(Response *response, std::string *body_buf) {
   response_ = response;
@@ -23,7 +27,7 @@ void ResponseHandler::executeMethod(Request &request) {
   if (request.getMethod() == "GET" || request.getMethod() == "HEAD")
     processGetAndHeaderMethod(request, location);
   else if (request.getMethod() == "PUT")
-    processPutMethod(request, location);
+    processPutMethod(request);
   else if (request.getMethod() == "POST")
     processPostMethod(request, location);
   else if (request.getMethod() == "DELETE")
@@ -110,15 +114,15 @@ void ResponseHandler::setAutoindexBody(const std::string &uri) {
   ss << "<a href=\"../\">../</a>\r\n";
   if (!(dir_ptr = opendir(url.c_str()))) {
     // Logger::logError();
-    return ;
+    return;
   }
   while ((item = readdir(dir_ptr))) {
     if (strcmp(item->d_name, ".") == 0 || strcmp(item->d_name, "..") == 0)
-      continue ;
+      continue;
     std::string pathname = std::string(item->d_name);
     if (stat((url + pathname).c_str(), &this->stat_buffer_) < 0) {
       // Logger::logError();
-      return ;
+      return;
     }
     if (S_ISDIR(this->stat_buffer_.st_mode))
       pathname += "/";
@@ -142,14 +146,14 @@ void ResponseHandler::setAutoindexBody(const std::string &uri) {

 void ResponseHandler::processGetAndHeaderMethod(Request &request, LocationConfig *&location) {
   //need last modified header
-  if (stat(getAccessPath(request.getPath()).c_str(), &this->stat_buffer_) < 0) {
-      // Logger::logError();
-      return ;
-  }
+  // if (stat(getAccessPath(request.getPath()).c_str(), &this->stat_buffer_) < 0) {
+  //   // Logger::logError();
+  //   return;
+  // }
   if (location->getAutoindex() && S_ISDIR(this->stat_buffer_.st_mode)) {
     setStatusLineWithCode(200);
     setAutoindexBody(request.getPath());
-    return ;
+    return;
   }

   // TODO: connection의 status_code를 보고 결정하도록...
@@ -160,45 +164,47 @@ void ResponseHandler::processGetAndHeaderMethod(Request &request, LocationConfig
   }

   // TODO: REQUEST에서 처리 해야될 수도 있을것같음
-  if (*(request.getPath().rbegin()) == '/') {
+  if (*(request.getFilePath().rbegin()) == '/') {
     findIndexForGetWhenOnlySlash(request, location);
-    if (*(request.getPath().rbegin()) == '/') {
-      setStatusLineWithCode(403);
+    std::cout <<"after: [" << request.getFilePath() << "]" << std::endl;
+    if (*(request.getFilePath().rbegin()) == '/') {
+      setStatusLineWithCode(404);
       return;
     }
   }
-  // std::cout << "path: " << request.getPath() << std::endl;
-  if (!isFileExist(request.getPath(), location)) {
+  std::cout << "filepath2: [" << request.getFilePath() << std::endl;
+  if (!isFileExist(request.getFilePath()) ){
     setStatusLineWithCode(404);
-    std::cout << "aaaaaaaaaaaaaaaaaa" << std::endl;
     return;
   } else {
     if (S_ISDIR(this->stat_buffer_.st_mode)) {
       setStatusLineWithCode(301);
       // TODO: string 을 생성 하지 않도록 수정하는 작업 필요
       // std::string temp_url = "http://" + request.getHeaderValue("Host") + request.getUri();
-      std::string temp_url = "http://" + request.getHeaderValue("Host") + ":" + request.getPort() + request.getPath();
+      std::string temp_url = "http://" + request.getHeaderValue("Host") + request.getPath();
+      if (*(temp_url.rbegin()) != '/')
+        temp_url.append("/");
       this->response_->setHeader("Location", temp_url);
       return;
     }
     setStatusLineWithCode(200);
     // body가 만들져 있지 않는 경우의 조건 추가
     if (body_buf_->empty())
-      setResponseBodyFromFile(request.getPath(), location);
+      setResponseBodyFromFile(request.getFilePath());
   }
 }

-void ResponseHandler::processPutMethod(Request &request, LocationConfig *&location) {
+void ResponseHandler::processPutMethod(Request &request) {
   if (*(request.getPath().rbegin()) == '/') {
     setStatusLineWithCode(409);
     return;
   }
-  if (!isFileExist(request.getPath(), location)) {
+  if (!isFileExist(request.getFilePath())) {
     // 경로가 디렉토리 이거나, 경로에 파일을 쓸 수 없을때
-    if (S_ISDIR(this->stat_buffer_.st_mode) || (this->stat_buffer_.st_mode & S_IRWXU)) {
-      setStatusLineWithCode(500);
-      return;
-    }
+    // if (S_ISDIR(this->stat_buffer_.st_mode) || (this->stat_buffer_.st_mode & S_IRWXU)) {
+    //   setStatusLineWithCode(500);
+    //   return;
+    // }
     setStatusLineWithCode(201);
   } else {
     setStatusLineWithCode(204);
@@ -262,7 +268,6 @@ void ResponseHandler::processDeleteMethod(const std::string &uri, LocationConfig
   } else {  // "/" 가 아닌 경우
     std::string url = getAccessPath(uri);
     if (stat(url.c_str(), &this->stat_buffer_) < 0) {
-      std::cout << "bbbbbbbbbbbbbb" << std::endl;
       setStatusLineWithCode(404);
     } else {
       // file or directory
@@ -300,7 +305,8 @@ bool ResponseHandler::isFileExist(const std::string &path) {
   //           << path << std::endl;
   // std::cout << "path: " << path << std::endl;
   if (stat(path.c_str(), &this->stat_buffer_) < 0) {
-    // std::cout << "this aint work" << std::endl;
+    std::cout << "this aint work" << std::endl;
+    std::cout << "why :[" << path << "]" <<std::endl;
     return (false);
   }
   return (true);
@@ -323,8 +329,8 @@ bool ResponseHandler::isPathAccessable(std::string &uri, LocationConfig *&locati
 }

 // 함수가 불리는 시점에서는 이미 파일은 존재함
-void ResponseHandler::setResponseBodyFromFile(const std::string &uri, LocationConfig *&location) {
-  std::ifstream file(getAccessPath(uri, location).c_str());
+void ResponseHandler::setResponseBodyFromFile(const std::string &filepath) {
+  std::ifstream file(filepath.c_str());

   file.seekg(0, std::ios::end);
   body_buf_->reserve(file.tellg());
@@ -379,9 +385,10 @@ void ResponseHandler::findIndexForGetWhenOnlySlash(Request &request, LocationCon
   std::vector<std::string>::const_iterator it_index;
   std::string temp;
   for (it_index = location->getIndex().begin(); it_index != location->getIndex().end(); it_index++) {
-    temp = location->getRoot() + request.getPath() + *it_index;
+    temp = request.getFilePath() + *it_index;
+    std::cout <<"temp: [" << temp << "]" << std::endl;
     if (isFileExist(temp)) {
-      request.setPath(request.getPath() + *it_index);
+      request.setFilePath(request.getFilePath() + *it_index);
       break;
     }
     temp.clear();
diff --git a/src/webserv/message/handler/ResponseHandler.hpp b/src/webserv/message/handler/ResponseHandler.hpp
index f92279e..cd810a7 100644
--- a/src/webserv/message/handler/ResponseHandler.hpp
+++ b/src/webserv/message/handler/ResponseHandler.hpp
@@ -61,14 +61,14 @@ class ResponseHandler {
   // Response::response_ setter end

   // 애매함
-  void setResponseBodyFromFile(const std::string &uri, LocationConfig *&location);
+  void setResponseBodyFromFile(const std::string &filepath);
   // 애매함 end

   /*--------------------------EXECUTING METHODS--------------------------------*/

   // blocks for setResponseFields begin
   void processGetAndHeaderMethod(Request &request, LocationConfig *&location);
-  void processPutMethod(Request &request, LocationConfig *&location);
+  void processPutMethod(Request &request);
   void processDeleteMethod(const std::string &uri, LocationConfig *&location);
   void processPostMethod(Request &request, LocationConfig *&location);
   // blocks for setResponseFields end
diff --git a/src/webserv/socket/Connection.cpp b/src/webserv/socket/Connection.cpp
index def4c5b..2696047 100644
--- a/src/webserv/socket/Connection.cpp
+++ b/src/webserv/socket/Connection.cpp
@@ -6,7 +6,6 @@ Connection::Connection()
     : listen_(false), fd_(-1), type_(SOCK_STREAM), listening_(NULL), request_(), response_() {
   sockaddr_to_connect_.sin_family = AF_INET;
   memset(buffer_, 0, BUF_SIZE);
-  chunked_message = false;

   recv_phase_ = MESSAGE_START_LINE_INCOMPLETE;
   interrupted = false;
@@ -58,7 +57,6 @@ void Connection::clear() {
   body_buf_.clear();
   recv_phase_ = MESSAGE_START_LINE_INCOMPLETE;
   string_buffer_content_length_ = -1;
-  chunked_message = false;
   status_code_ = -1;
   interrupted = false;
   chunked_checker_ = STR_SIZE;
diff --git a/src/webserv/socket/Connection.hpp b/src/webserv/socket/Connection.hpp
index ccf6bd0..12af7be 100644
--- a/src/webserv/socket/Connection.hpp
+++ b/src/webserv/socket/Connection.hpp
@@ -58,8 +58,6 @@ class Connection {
   pid_t cgi_pid;
   int writepipe[2], readpipe[2];

-  bool chunked_message;
-
   int status_code_;

   int chunked_checker_;
diff --git a/src/webserv/socket/Kqueue.cpp b/src/webserv/socket/Kqueue.cpp
index 7ddcce9..4533414 100644
--- a/src/webserv/socket/Kqueue.cpp
+++ b/src/webserv/socket/Kqueue.cpp
@@ -68,12 +68,9 @@ void Kqueue::kqueueProcessEvents(SocketManager *sm) {
           }
         }
         // TODO: remove; for debug
-        // if (c->getRequest().getMethod() == "POST")
-        // {
-        //   std::cout << "=========c->buffer_=========" << std::endl;
-        //   std::cout << c->buffer_ << std::endl;
-        //   std::cout << "=========c->buffer_=========" << std::endl;
-        // }
+        std::cout << "=========c->buffer_=========" << std::endl;
+        std::cout << c->buffer_ << std::endl;
+        std::cout << "=========c->buffer_=========" << std::endl;
         if (c->getRecvPhase() == MESSAGE_START_LINE_INCOMPLETE ||
             c->getRecvPhase() == MESSAGE_START_LINE_COMPLETE ||
             c->getRecvPhase() == MESSAGE_HEADER_INCOMPLETE ||
@@ -98,11 +95,9 @@ void Kqueue::kqueueProcessEvents(SocketManager *sm) {
           sm->closeConnection(c);
           c->clear();
         } else {
-          //std::cout << "please" << std::endl;
           if (c->status_code_ < 0) // c->status_code_ 기본값 (-1) 일때 == 에러코드가 결정 되지 않았을 때 == 정상 request message 일 때
             MessageHandler::checkCgiProcess(c);
           if (c->getRecvPhase() == MESSAGE_CGI_COMPLETE) {
-            std::cout << "cgi" << std::endl;
             CgiHandler::handle_cgi_header(c);
             if (c->getRequest().getMethod() == "POST" &&
                 c->getRequest().getHeaderValue("Content-Length").empty()) {
@@ -117,14 +112,10 @@ void Kqueue::kqueueProcessEvents(SocketManager *sm) {
             } else
               CgiHandler::receive_cgi_body(c);
           }
-         std::cout << "status code0: " << c->getResponse().getStatusCode() << std::endl;
           MessageHandler::execute_server_side(c);  // 서버가 실제 동작을 진행하는 부분
-         std::cout << "status code1: " << c->getResponse().getStatusCode() << std::endl;
           MessageHandler::setResponseMessage(c);
-         std::cout << "status code2: " << c->getResponse().getStatusCode() << std::endl;
           MessageHandler::sendResponseToClient(c);
           std::cout << "status code: " << c->getResponse().getStatusCode() << std::endl;
-         std::cout << "status code3: " << c->getResponse().getStatusCode() << std::endl;
           if (!c->getResponse().getHeaderValue("Connection").compare("close") ||
               !c->getRequest().getHttpVersion().compare("HTTP/1.0")) {
             sm->closeConnection(c);
diff --git a/var/www/html/YoupiBanane/directory/nop/other.pouic b/var/www/html/YoupiBanane/Yeah/not_happy.bad_extension
similarity index 100%
rename from var/www/html/YoupiBanane/directory/nop/other.pouic
rename to var/www/html/YoupiBanane/Yeah/not_happy.bad_extension
diff --git a/var/www/html/YoupiBanane/directory/nop/youpi.bad_extension b/var/www/html/YoupiBanane/nop/other.pouic
similarity index 100%
rename from var/www/html/YoupiBanane/directory/nop/youpi.bad_extension
rename to var/www/html/YoupiBanane/nop/other.pouic
diff --git a/var/www/html/YoupiBanane/directory/youpi.bad_extension b/var/www/html/YoupiBanane/nop/youpi.bad_extension
similarity index 100%
rename from var/www/html/YoupiBanane/directory/youpi.bad_extension
rename to var/www/html/YoupiBanane/nop/youpi.bad_extension
diff --git a/var/www/html/YoupiBanane/not_happy.bad_extension b/var/www/html/YoupiBanane/not_happy.bad_extension
new file mode 100644
index 0000000..893795b
--- /dev/null
+++ b/var/www/html/YoupiBanane/not_happy.bad_extension
@@ -0,0 +1,2 @@
+3e8
+eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
\ No newline at end of file
diff --git a/var/www/html/aaa.html b/var/www/html/aaa.html
new file mode 100644
index 0000000..01cc674
--- /dev/null
+++ b/var/www/html/aaa.html
@@ -0,0 +1 @@
+dddddddddddddd
\ No newline at end of file
diff --git a/var/www/html/ddd.html b/var/www/html/ddd.html
new file mode 100644
index 0000000..77e6d6e
--- /dev/null
+++ b/var/www/html/ddd.html
@@ -0,0 +1 @@
+eeeeeeeeee
\ No newline at end of file
